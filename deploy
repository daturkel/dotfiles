#!/usr/bin/env python

from string import Template
import tomllib
import pathlib
import os
import shutil
import fire
import re


class Deploy:
    def __init__(self):
        with open("config.toml","rb") as config_file:
            self.config = tomllib.load(config_file)

        self.projects = self.config["settings"]["projects"]
        self.files = self.config["settings"]["files"]
        self.profiles = self._get_profiles()

    def _get_profiles(self):
        profiles = {"__default__": {}}
        # create dictionary of profiles
        for key in self.config["profile"].keys():
            if isinstance(self.config["profile"][key], dict):
                profiles[key] = self.config["profile"][key]
            else:
                profiles["__default__"][key] = self.config["profile"][key]
        # fall back on defaults
        non_defaults = [
            profile for profile in profiles.keys() if profile != "__default__"
        ]
        for profile in non_defaults:
            for key in profiles["__default__"]:
                if key not in profiles[profile].keys():
                    profiles[profile][key] = profiles["__default__"][key]
        return profiles

    def _deploy(self, projects, profiles, prefix_project):
        for project in projects:
            for profile in profiles:
                new_path = (
                    f"{project}_{profile}" if prefix_project else f"{profile}_{project}"
                )
                try:
                    shutil.rmtree(new_path)
                except FileNotFoundError:
                    pass
                shutil.copytree(project, new_path, ignore=self._ignore_files)
                old_files = []
                for root, _, files in os.walk(project):
                    for file_ in files:
                        old_files.append(os.path.join(root, file_))
                old_files = [file_ for file_ in old_files if os.path.isfile(file_)]
                for file_ in old_files:
                    old_file = re.search(r"[^/]+/(.*)", file_).group(1)
                    new_name = os.path.join(new_path, old_file)
                    if old_file in self.files.get(project, []):
                        with open(file_) as f:
                            tmp = Template(f.read())
                        new = tmp.safe_substitute(self.profiles[profile])
                        with open(new_name, "w") as f:
                            f.write(new)
                    else:
                        os.symlink(
                            os.path.join(pathlib.Path.cwd(), pathlib.Path(file_)),
                            pathlib.Path(new_name),
                        )

    def _ignore_files(self, directory, files):
        return [f for f in files if os.path.isfile(os.path.join(directory, f))]

    def dispatch(self, project, profile, prefix_project=True):
        if isinstance(profile, str):
            profiles = [profile]
        else:
            profiles = profile
        if isinstance(project, str):
            projects = [project]
        else:
            projects = project
        self._deploy(projects, profiles, prefix_project)


if __name__ == "__main__":
    d = Deploy()
    fire.Fire(d.dispatch)
