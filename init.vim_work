" Must be first
filetype off

" Must be early
let maplocalleader = ","

function! DoRemote(arg)
    UpdateRemotePlugins
endfunction

let g:python_host_prog='/Users/dturkel/anaconda/envs/python2/bin/python'
let g:python3_host_prog='/Users/dturkel/anaconda/bin/python'

call plug#begin('~/.config/nvim/plugged')
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    "let g:deoplete#enable_at_startup = 1
    "Plug 'autozimu/LanguageClient-neovim', {
        "\ 'branch': 'next',
        "\ 'do': 'bash.install.sh',
        "\ }
    "Plug 'zchee/deoplete-jedi'
    Plug 'mhinz/vim-startify'
    Plug 'rafi/awesome-vim-colorschemes'
    Plug 'shmup/vim-sql-syntax'
    Plug 'ervandew/supertab'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-repeat'
    Plug 'itchyny/lightline.vim'
    Plug 'kassio/neoterm'
    Plug '/usr/local/opt/fzf'
    Plug 'lambdalisue/gina.vim'
call plug#end()

"" plugin settings
"" deoplete settings
"" around-source marks
"call deoplete#custom#var('around', {
            "\'range_above': 15,
            "\'range_below': 15,
            "\'mark_above': '[↑]',
	    	"\'mark_below': '[↓]',
	     	"\'mark_changes': '[*]',
            "\})
"" disable by default
"let b:deoplete_disable_auto_complete=1
"let g:deoplete_disable_auto_complete=1
"" empty sources by default
"let g:deoplete#sources = {}
"" no completion in strings or comments
"call deoplete#custom#source('_',
    "\ 'disabled_syntaxes', ['Comment','String'])
"" language sources
"call deoplete#custom#option('sources', {
    "\ 'python': ['LanguageClient'],
    "\})
"" language-client settings
"let g:LanguageClient_serverCommands = {
    "\'python': ['~/anaconda/bin/pyls'],
    "\}
"" supertab settings
" utilize vim's omnicomplete (disabled for now)
"let g:SuperTabDefaultCompletionType = 'context'
"" airline settings
" remove spell detection
"let g:airline_detect_spell=0
" remove seperators
" let g:airline_left_sep=''
" let g:airline_right_sep=''
" " remove unused modes
" let g:airline#extensions#branch#enabled=0
" let g:airline#extensions#syntastic#enabled=0
" " disable whitespace/tabs detection
" let g:airline#extensions#whitespace#enabled=0
" " set third section to filename
" let g:airline_section_b="%f"
" " empty third and fourth sections
" let g:airline_section_c=""
" let g:airline_section_x=""
" " put filetype in fifth section
" let g:airline_section_y="%Y"
"" statusline settings
" lightline
" hide --insert-- message
set noshowmode
let g:lightline = {
    \ 'active': {
    \   'right': [['lineinfo'],
    \             ['percent'],
    \             ['filetype' ]],
    \   'left': [['mode','paste'],
    \            ['readonly','filename','modified'],
    \            ['gitbranch']]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'gina#component#repo#preset'
    \ }
    \ }
"" fzf settings
" fzf remap 
map ; :Files<CR>
map ' :Files 
map [ :Lines<CR>
"" scroll settings used
" scroll padding 5 lines
set so=5
" scroll to next row for wrap
nnoremap j gj
nnoremap k gk
"" appearance settings
" line numbers
set number
" highlight current line
set cursorline
" set colorscheme
syntax enable
set termguicolors
colorscheme wombat256mod
" allow unsaved buffers to be hidden
set hidden
" show matching brackets
set showmatch
" startified colorscheme fix 
autocmd User Startified 
    \ highlight! link NonText Normal |
    \ highlight! NonText guifg=#242424
" startify ascii
let g:ascii = [
            \'   ____  ___  ______   ________ ___ ',
            \'  / __ \/ _ \/ __ \ | / / / __ `__ \',
            \' / / / /  __/ /_/ / |/ / / / / / / /',
            \'/_/ /_/\___/\____/\___/_/_/ /_/ /_/ ',
            \]
let g:startify_custom_header =
            \ map(g:ascii, '"   ".v:val')

"" behavioral settings
" don't assume the next line is a comment just because this one is
au FileType * setlocal formatoptions-=cro
" determine that .vimrc is a .vim file
au BufRead,BufNewFile *.vimrc set filetype=vim
" autoread outside changes
set autoread
" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
set clipboard=unnamedplus
" strip trailing whitespace 
autocmd FileType py,sql autocmd BufWritePre <buffer> %s/\s\+$//e
" enable mouse
set mouse=a
" 700 lines of history
set history=700
" show ruler
set ruler
" don't be case sensitive when searching
set ignorecase
" but do be case sensitive once an upper case letter is used
set smartcase
" set encoding
set encoding=utf8
" break lines at spaces
set linebreak
" >> and << move text 4 spaces
set shiftwidth=4
" tabs are just spaces 
set expandtab
" tabs are 4 columns wide
set tabstop=4
" pressing tab in insert mode is 4 spaces
set softtabstop=4
" but html and css should be two spaces
autocmd Filetype html setlocal ts=2 sw=2 sts=2
autocmd Filetype css setlocal ts=2 sw=2 sts=2
autocmd Filetype scss setlocal ts=2 sw=2 sts=2
" horizontal splits come below
set splitbelow
" remap jj to escape in insert mode
:imap jj <Esc>
" remap enter to clear highlighting
nnoremap <CR> :noh<CR>
" don't use Ex mode, use Q for formatting
map Q gq
" remaps c-u to allow undo recover from accidental c-u
inoremap <C-U> <C-G>u<C-U>
" buffer wildmenu
set wildchar=<Tab> wildmenu wildmode=full
" escape leaves terminal mode
tnoremap <Esc> <C-\><C-n>
" enter insert mode when entering terminal
autocmd BufWinEnter,WinEnter term://* startinsert
autocmd BufLeave term://* stopinsert
" no spellcheck in terminal please!
au TermOpen * setlocal nospell
" buffer navigation
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>
map gD :bd!<cr>
" miscellaneous
if has("autocmd")
    " enable filetype detection
    " also load indent file
    filetype plugin indent on
    augroup vimrcEx
        au!
    augroup END
else
    set smartindent
    set autoindent
endif
